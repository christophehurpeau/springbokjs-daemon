{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;kBAiEwB,Y;;AAjExB;;AACA;;;;AACA;;;;AACA;;;;AAEA,4BAAU,EAAE,KAAK,oBAAP,EAA6B,SAAS,kCAAtC,EAAV;;AAEA,MAAM,eAAN,8BAA2C;AACvC,gBAAY,OAAZ,EAAqB,IAArB,EAA2B;AACvB;AACA,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,IAAL,GAAY,IAAZ;AACA,aAAK,OAAL,GAAe,IAAf;AACA,aAAK,MAAL,GAAc,0BAAW,oBAAX,CAAd;AACA,aAAK,MAAL,CAAY,IAAZ,CAAiB,WAAW,QAAU,KAAG,KAAK,IAAL,CAAU,GAAV,CAAe,GAAvC,CAAjB;AACH;;AAED,YAAQ;AACJ,YAAI,KAAK,OAAT,EAAkB;AACd,kBAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACH;;AAED,aAAK,MAAL,CAAY,IAAZ,CAAiB,aAAjB;;AAEA,aAAK,OAAL,GAAe,0BAAM,KAAK,OAAX,EAAoB,KAAK,IAAzB,EAA+B,EAAE,KAAK,QAAQ,GAAf,EAA/B,CAAf;AACA,aAAK,OAAL,CAAa,MAAb,CAAoB,WAApB,CAAgC,MAAhC,EAAyC,IAAD,IAAU;AAC9C,oBAAQ,MAAR,CAAe,KAAf,CAAqB,IAArB;AACA,iBAAK,IAAL,CAAU,QAAV,EAAoB,IAApB;AACH,SAHD;AAIA,aAAK,OAAL,CAAa,MAAb,CAAoB,WAApB,CAAgC,MAAhC,EAAyC,IAAD,IAAU;AAC9C,oBAAQ,MAAR,CAAe,KAAf,CAAqB,IAArB;AACA,iBAAK,IAAL,CAAU,QAAV,EAAoB,IAApB;AACH,SAHD;;AAKA,aAAK,OAAL,CAAa,WAAb,CAAyB,MAAzB,EAAiC,CAAC,IAAD,EAAO,MAAP,KAAkB;AAC/C,iBAAK,MAAL,CAAY,IAAZ,CAAiB,QAAjB,EAA2B,EAAE,IAAF,EAAQ,MAAR,EAA3B;AACA,iBAAK,OAAL,GAAe,IAAf;AACH,SAHD;AAIH;;AAED,WAAO;AACH,YAAI,KAAK,OAAT,EAAkB;AACd,iBAAK,MAAL,CAAY,IAAZ,CAAiB,aAAjB;AACA,kBAAM,UAAU,KAAK,OAArB;AACA,iBAAK,OAAL,GAAe,IAAf;;AAEA,oBAAQ,kBAAR;AACA,oBAAQ,WAAR,CAAoB,MAApB,EAA4B,CAAC,IAAD,EAAO,MAAP,KAAkB;AAC1C,qBAAK,MAAL,CAAY,IAAZ,CAAiB,SAAjB,EAA4B,EAAE,IAAF,EAAQ,MAAR,EAA5B;AACH,aAFD;AAGA,oBAAQ,IAAR;AACH;AACJ;;AAED,cAAU;AACN,aAAK,MAAL,CAAY,IAAZ,CAAiB,eAAjB;AACA,aAAK,IAAL;AACA,aAAK,KAAL;AACH;;AAED,mBAAe,OAAf,EAAgC;AAC5B,eAAO,WAAW,MAAM,KAAK,OAAL,EAAjB,EAAiC,OAAjC,CAAP;AACH;AAvDsC;;AA0D5B,SAAS,YAAT,CAAsB,OAAtB,EAA+B,IAA/B,EAAqC;AAChD,WAAO,IAAI,eAAJ,CAAoB,OAApB,EAA6B,IAA7B,CAAP;AACH;;AAEM,MAAM,sBAAO,QAAQ,aAAa,MAAb,EAAqB,IAArB,CAArB;AACP,aAAa,IAAb,GAAoB,IAApB","file":"index.js","sourcesContent":["import { spawn } from 'child_process';\nimport Logger, { addConfig } from 'nightingale';\nimport ConsoleLogger from 'nightingale-console';\nimport { EventEmitter } from 'events';\n\naddConfig({ key: 'springbokjs-daemon', handler: new ConsoleLogger() });\n\nclass SpringbokDaemon extends EventEmitter {\n    constructor(command, args) {\n        super();\n        this.command = command;\n        this.args = args;\n        this.process = null;\n        this.logger = new Logger('springbokjs-daemon');\n        this.logger.info(command + (args && (` ${args.join(' ')}`)));\n    }\n\n    start() {\n        if (this.process) {\n            throw new Error('Process already started');\n        }\n\n        this.logger.info('Starting...');\n\n        this.process = spawn(this.command, this.args, { env: process.env });\n        this.process.stdout.addListener('data', (data) => {\n            process.stdout.write(data);\n            this.emit('stdout', data);\n        });\n        this.process.stderr.addListener('data', (data) => {\n            process.stderr.write(data);\n            this.emit('stderr', data);\n        });\n\n        this.process.addListener('exit', (code, signal) => {\n            this.logger.warn('Exited', { code, signal });\n            this.process = null;\n        });\n    }\n\n    stop() {\n        if (this.process) {\n            this.logger.info('Stopping...');\n            const process = this.process;\n            this.process = null;\n\n            process.removeAllListeners();\n            process.addListener('exit', (code, signal) => {\n                this.logger.info('Stopped', { code, signal });\n            });\n            process.kill();\n        }\n    }\n\n    restart() {\n        this.logger.info('Restarting...');\n        this.stop();\n        this.start();\n    }\n\n    restartTimeout(timeout: number) {\n        return setTimeout(() => this.restart(), timeout);\n    }\n}\n\nexport default function createDaemon(command, args) {\n    return new SpringbokDaemon(command, args);\n}\n\nexport const node = args => createDaemon('node', args);\ncreateDaemon.node = node;\n"]}