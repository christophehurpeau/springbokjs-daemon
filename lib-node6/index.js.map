{"version":3,"sources":["../src/index.js"],"names":["pattern","handler","INFO","key","displayName","command","global","process","argv","args","autoRestart","SIGTERMTimeout","stopPromise","logger","info","start","Error","Promise","resolve","reject","stdio","on","code","signal","warn","debug","then","message","success","restart","stop","runningProcess","killTimeout","setTimeout","kill","removeAllListeners","once","clearTimeout","sendSIGUSR2"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA,4BAAU,EAAEA,SAAS,qBAAX,EAAkCC,SAAS,iCAAkB,oBAAOC,IAAzB,CAA3C,EAAV;;kBAWe,CAAC;AACdC,KADc;AAEdC,aAFc;AAGdC,YAAUC,OAAOC,OAAP,CAAeC,IAAf,CAAoB,CAApB,CAHI;AAIdC,WAJc;AAKdC,gBAAc,KALA;AAMdC,mBAAiB;AANH,MAAD,KAOS;AACtB,MAAIJ,UAAU,IAAd;AACA,MAAIK,cAAc,IAAlB;AACA,QAAMC,SAAS,0BAAY,qBAAoBV,MAAO,IAAGA,GAAI,EAAd,GAAkB,EAAG,EAArD,EAAwDC,WAAxD,CAAf;AACAS,SAAOC,IAAP,CAAY,SAAZ,EAAuB,EAAET,OAAF,EAAWI,IAAX,EAAvB;;AAEA,QAAMM,QAAQ,MAAM;AAClB,QAAIR,OAAJ,EAAa;AACX,YAAM,IAAIS,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCZ,gBAAU,0BAAMF,OAAN,EAAeI,IAAf,EAAqB;AAC7BW;AAD6B,OAArB,CAAV;;AAIAb,cAAQc,EAAR,CAAW,MAAX,EAAmB,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACnCV,eAAOW,IAAP,CAAY,QAAZ,EAAsB,EAAEF,IAAF,EAAQC,MAAR,EAAtB;AACAhB,kBAAU,IAAV;AACA,YAAIG,WAAJ,EAAiB;AACfG,iBAAOY,KAAP,CAAa,aAAb;AACA,oBAAKV,KAAL,GAAaW,IAAb,CAAkBR,OAAlB,EAA2BC,MAA3B;AACD,SAHD,MAGO;AACLA;AACD;AACF,OATD;;AAWAZ,cAAQc,EAAR,CAAW,SAAX,EAAuBM,OAAD,IAAa;AACjC,YAAIA,YAAY,OAAhB,EAAyB;AACvBd,iBAAOe,OAAP,CAAe,OAAf;AACAV;AACD,SAHD,MAGO,IAAIS,YAAY,SAAhB,EAA2B;AAChC,oBAAKE,OAAL;AACD,SAFM,MAEA;AACLhB,iBAAOC,IAAP,CAAY,SAAZ,EAAuB,EAAEa,OAAF,EAAvB;AACD;AACF,OATD;AAUD,KA1BM,CAAP;AA2BD,GAhCD;;AAkCA,QAAMG,OAAO,MACXlB,cAAc,IAAIK,OAAJ,CAAYC,WAAW;AACnC,UAAMa,iBAAiBxB,OAAvB;AACAA,cAAU,IAAV;;AAEA,UAAMyB,cAAcC,WAAW,MAAM;AACnCpB,aAAOW,IAAP,CAAY,6BAAZ;AACAO,qBAAeG,IAAf,CAAoB,SAApB;AACD,KAHmB,EAGjBvB,cAHiB,CAApB;;AAKAoB,mBAAeI,kBAAf;AACAJ,mBAAeK,IAAf,CAAoB,MAApB,EAA4B,CAACd,IAAD,EAAOC,MAAP,KAAkB;AAC5CV,aAAOC,IAAP,CAAY,SAAZ,EAAuB,EAAEQ,IAAF,EAAQC,MAAR,EAAvB;AACA,UAAIS,WAAJ,EAAiBK,aAAaL,WAAb;AACjBpB,oBAAc,IAAd;AACAM;AACD,KALD;AAMAa,mBAAeG,IAAf;AACD,GAjBa,CADhB;;AAqBA,SAAO;AACLnB,YAAQ;AACNF,aAAOC,IAAP,CAAY,aAAZ;AACA,aAAOC,OAAP;AACD,KAJI;;AAMLe,WAAO;AACL,UAAI,CAACvB,OAAL,EAAc,OAAOU,QAAQC,OAAR,CAAgBN,WAAhB,CAAP;;AAEdC,aAAOC,IAAP,CAAY,aAAZ;AACA,aAAOgB,MAAP;AACD,KAXI;;AAaLD,cAAU;AACRhB,aAAOC,IAAP,CAAY,eAAZ;AACA,aAAOgB,OAAOJ,IAAP,CAAY,MAAMX,OAAlB,CAAP;AACD,KAhBI;;AAkBLuB,kBAAc;AACZ/B,cAAQ2B,IAAR,CAAa,SAAb;AACD;AApBI,GAAP;AAsBD,C","file":"index.js","sourcesContent":["import { spawn } from 'child_process';\nimport Logger, { addConfig, levels } from 'nightingale/src';\nimport ConsoleLogger from 'nightingale-console/src';\n\naddConfig({ pattern: /^springbokjs-daemon/, handler: new ConsoleLogger(levels.INFO) });\n\ntype OptionsType = {|\n  key: ?string,\n  displayName: ?string,\n  command: ?string,\n  args: ?Array<string | number>,\n  autoRestart: ?boolean,\n  SIGTERMTimeout: ?number,\n|};\n\nexport default ({\n  key,\n  displayName,\n  command = global.process.argv[0],\n  args = [],\n  autoRestart = false,\n  SIGTERMTimeout = 4000,\n}: OptionsType = {}) => {\n  let process = null;\n  let stopPromise = null;\n  const logger = new Logger(`springbokjs-daemon${key ? `:${key}` : ''}`, displayName);\n  logger.info('created', { command, args });\n\n  const start = () => {\n    if (process) {\n      throw new Error('Process already started');\n    }\n\n    return new Promise((resolve, reject) => {\n      process = spawn(command, args, {\n        stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n      });\n\n      process.on('exit', (code, signal) => {\n        logger.warn('exited', { code, signal });\n        process = null;\n        if (autoRestart) {\n          logger.debug('autorestart');\n          this.start().then(resolve, reject);\n        } else {\n          reject();\n        }\n      });\n\n      process.on('message', (message) => {\n        if (message === 'ready') {\n          logger.success('ready');\n          resolve();\n        } else if (message === 'restart') {\n          this.restart();\n        } else {\n          logger.info('message', { message });\n        }\n      });\n    });\n  };\n\n  const stop = () => (\n    stopPromise = new Promise(resolve => {\n      const runningProcess = process;\n      process = null;\n\n      const killTimeout = setTimeout(() => {\n        logger.warn('timeout: sending SIGKILL...');\n        runningProcess.kill('SIGKILL');\n      }, SIGTERMTimeout);\n\n      runningProcess.removeAllListeners();\n      runningProcess.once('exit', (code, signal) => {\n        logger.info('stopped', { code, signal });\n        if (killTimeout) clearTimeout(killTimeout);\n        stopPromise = null;\n        resolve();\n      });\n      runningProcess.kill();\n    })\n  );\n\n  return {\n    start() {\n      logger.info('starting...');\n      return start();\n    },\n\n    stop() {\n      if (!process) return Promise.resolve(stopPromise);\n\n      logger.info('stopping...');\n      return stop();\n    },\n\n    restart() {\n      logger.info('restarting...');\n      return stop().then(() => start());\n    },\n\n    sendSIGUSR2() {\n      process.kill('SIGUSR2');\n    },\n  };\n};\n"]}