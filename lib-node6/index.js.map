{"version":3,"sources":["../src/index.js"],"names":["createDaemon","key","handler","INFO","SpringbokDaemon","constructor","command","args","autorestart","process","stopPromise","logger","info","join","start","Error","env","stdout","addListener","data","write","emit","stderr","code","signal","warn","debug","stop","Promise","resolve","killTimeout","setTimeout","kill","removeAllListeners","clearTimeout","restart","then","restartTimeout","timeout","node"],"mappings":"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","file":"index.js","sourcesContent":["import { spawn } from 'child_process';\nimport { EventEmitter } from 'events';\nimport Logger, { addConfig, levels } from 'nightingale/src';\nimport ConsoleLogger from 'nightingale-console/src';\n\naddConfig({ key: 'springbokjs-daemon', handler: new ConsoleLogger(levels.INFO) });\n\ntype OptionsType = {|\n  autorestart: ?boolean,\n|};\n\nclass SpringbokDaemon extends EventEmitter {\n  constructor(command, args, { autorestart }: OptionsType = {}) {\n    super();\n    this.command = command;\n    this.args = args;\n    this.process = null;\n    this.stopPromise = null;\n    this.logger = new Logger('springbokjs-daemon');\n    this.logger.info(command + (args && (` ${args.join(' ')}`)));\n    this.autorestart = autorestart || false;\n  }\n\n  start() {\n    if (this.process) {\n      throw new Error('Process already started');\n    }\n\n    this.logger.info('Starting...');\n\n    this.process = spawn(this.command, this.args, { env: process.env });\n    this.process.stdout.addListener('data', (data) => {\n      process.stdout.write(data);\n      this.emit('stdout', data);\n    });\n    this.process.stderr.addListener('data', (data) => {\n      process.stderr.write(data);\n      this.emit('stderr', data);\n    });\n\n    this.process.addListener('exit', (code, signal) => {\n      this.logger.warn('Exited', { code, signal });\n      this.process = null;\n      if (this.autorestart) {\n        this.logger.debug('Autorestart');\n        this.start();\n      }\n    });\n  }\n\n  stop() {\n    if (!this.process) return Promise.resolve(this.stopPromise);\n\n    this.logger.info('Stopping...');\n    return this.stopPromise = new Promise(resolve => {\n      const process = this.process;\n      this.process = null;\n\n      const killTimeout = setTimeout(() => {\n        this.logger.warn('Timeout: sending SIGKILL...');\n        process.kill('SIGKILL');\n      }, 4000);\n\n      process.removeAllListeners();\n      process.addListener('exit', (code, signal) => {\n        this.logger.info('Stopped', { code, signal });\n        if (killTimeout) clearTimeout(killTimeout);\n        this.stopPromise = null;\n        resolve();\n      });\n      process.kill();\n    });\n  }\n\n  restart() {\n    this.logger.info('Restarting...');\n    return this.stop().then(() => this.start());\n  }\n\n  restartTimeout(timeout: number) {\n    return setTimeout(() => this.restart(), timeout);\n  }\n}\n\nexport default function createDaemon(command, args) {\n  return new SpringbokDaemon(command, args);\n}\n\nexport const node = args => createDaemon('node', args);\ncreateDaemon.node = node;\n"]}