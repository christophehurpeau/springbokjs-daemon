{"version":3,"sources":["../src/index.js"],"names":["pattern","handler","INFO","key","displayName","command","global","process","argv","args","autoRestart","SIGTERMTimeout","stopPromise","logger","info","stop","Promise","resolve","runningProcess","killTimeout","setTimeout","warn","kill","removeAllListeners","once","code","signal","clearTimeout","start","Error","reject","stdio","on","debug","then","message","success","restart","sendSIGUSR2"],"mappings":"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","file":"index.js","sourcesContent":["import { spawn } from 'child_process';\nimport Logger, { addConfig, levels } from 'nightingale/src';\nimport ConsoleLogger from 'nightingale-console/src';\n\naddConfig({ pattern: /^springbokjs-daemon/, handler: new ConsoleLogger(levels.INFO) });\n\ntype OptionsType = {|\n  key: ?string,\n  displayName: ?string,\n  command: ?string,\n  args: ?Array<string | number>,\n  autoRestart: ?boolean,\n  SIGTERMTimeout: ?number,\n|};\n\nexport default ({\n  key,\n  displayName,\n  command = global.process.argv[0],\n  args = [],\n  autoRestart = false,\n  SIGTERMTimeout = 4000,\n}: OptionsType = {}) => {\n  let process = null;\n  let stopPromise = null;\n  const logger = new Logger(`springbokjs-daemon${key ? `:${key}` : ''}`, displayName);\n  logger.info('created', { command, args });\n\n  const stop = () => {\n    if (!process) return Promise.resolve(stopPromise);\n\n    stopPromise = new Promise(resolve => {\n      const runningProcess = process;\n      process = null;\n\n      const killTimeout = setTimeout(() => {\n        logger.warn('timeout: sending SIGKILL...');\n        runningProcess.kill('SIGKILL');\n      }, SIGTERMTimeout);\n\n      runningProcess.removeAllListeners();\n      runningProcess.once('exit', (code, signal) => {\n        logger.info('stopped', { code, signal });\n        if (killTimeout) clearTimeout(killTimeout);\n        stopPromise = null;\n        resolve();\n      });\n      runningProcess.kill();\n    });\n  };\n\n  const start = () => {\n    if (process) {\n      throw new Error('Process already started');\n    }\n\n    return new Promise((resolve, reject) => {\n      process = spawn(command, args, {\n        stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n      });\n\n      process.on('exit', (code, signal) => {\n        logger.warn('exited', { code, signal });\n        process = null;\n        if (autoRestart) {\n          logger.debug('autorestart');\n          start().then(resolve, reject);\n        } else {\n          reject();\n        }\n      });\n\n      process.on('message', (message) => {\n        if (message === 'ready') {\n          logger.success('ready');\n          resolve();\n        } else if (message === 'restart') {\n          logger.info('restarting...');\n          stop().then(() => start());\n        } else {\n          logger.info('message', { message });\n        }\n      });\n    });\n  };\n\n  return {\n    start() {\n      logger.info('starting...');\n      return start();\n    },\n\n    stop() {\n      if (!process) logger.info('stopping...');\n      return stop();\n    },\n\n    restart() {\n      logger.info('restarting...');\n      return stop().then(() => start());\n    },\n\n    sendSIGUSR2() {\n      process.kill('SIGUSR2');\n    },\n  };\n};\n"]}