{"version":3,"file":"index-node6.cjs.js","sources":["../src/index.ts"],"sourcesContent":["import { spawn, ChildProcess } from 'child_process';\nimport { Readable as ReadableStream } from 'stream';\nimport gracefulKill from 'graceful-kill';\nimport split from 'split';\nimport Logger, { addConfig, Level } from 'nightingale';\nimport ConsoleLogger from 'nightingale-console';\n\naddConfig({ pattern: /^springbokjs-daemon/, handler: new ConsoleLogger(Level.INFO) });\n\nexport interface Options {\n  key?: string;\n  displayName?: string;\n  prefixStdout?: boolean;\n  command?: string;\n  args?: Array<string | number>;\n  cwd?: string;\n  autoRestart?: boolean;\n  SIGTERMTimeout?: number;\n}\n\nexport default ({\n  key,\n  displayName,\n  prefixStdout = false,\n  command = global.process.argv[0],\n  args = [],\n  cwd,\n  autoRestart = false,\n  SIGTERMTimeout = 4000,\n}: Options = {}) => {\n  let process: ChildProcess | null = null;\n  let stopPromise: Promise<void> | void;\n  const logger = new Logger(`springbokjs-daemon${key ? `:${key}` : ''}`, displayName);\n  logger.info('created', { command, args });\n\n  const stop = (): Promise<void> => {\n    if (!process) return Promise.resolve(stopPromise);\n\n    const runningProcess = process;\n    process = null;\n\n    runningProcess.removeAllListeners();\n    stopPromise = gracefulKill(runningProcess, SIGTERMTimeout).then(() => {\n      stopPromise = undefined;\n    });\n\n    return stopPromise as Promise<void>;\n  };\n\n  const start = () => {\n    if (process) {\n      throw new Error('Process already started');\n    }\n\n    return new Promise((resolve, reject) => {\n      const stdoutOption = prefixStdout ? 'pipe' : 'inherit';\n      process = spawn(command, args as string[], {\n        cwd,\n        stdio: ['ignore', stdoutOption, stdoutOption, 'ipc'],\n      });\n\n      if (prefixStdout) {\n        const logStreamInLogger = (stream: ReadableStream, loggerLevel: Level) => {\n          stream.pipe(split()).on('data', (line: string) => {\n            if (line.length === 0) return;\n            if (line.startsWith('{') && line.endsWith('}')) {\n              try {\n                const json: object = JSON.parse(line);\n                logger.log('', json, loggerLevel);\n                return;\n              } catch (err) {}\n            }\n\n            logger.log(line, undefined, loggerLevel);\n          });\n        };\n\n        logStreamInLogger(process.stdout, Level.INFO);\n        logStreamInLogger(process.stderr, Level.ERROR);\n      }\n\n      process.on('exit', (code, signal) => {\n        logger.warn('exited', { code, signal });\n        process = null;\n        if (autoRestart) {\n          logger.debug('autorestart');\n          start().then(resolve, reject);\n        } else {\n          reject();\n        }\n      });\n\n      process.on('message', message => {\n        if (message === 'ready') {\n          logger.success('ready');\n          resolve();\n        } else if (message === 'restart') {\n          logger.info('restarting...');\n          stop().then(() => start());\n        } else {\n          logger.info('message', { message });\n        }\n      });\n    });\n  };\n\n  return {\n    hasExited() {\n      return process === null;\n    },\n\n    start() {\n      logger.info('starting...');\n      return start();\n    },\n\n    stop() {\n      if (!process) logger.info('stopping...');\n      return stop();\n    },\n\n    restart() {\n      logger.info('restarting...');\n      return stop().then(() => start());\n    },\n\n    sendSIGUSR2() {\n      if (process) {\n        process.kill('SIGUSR2');\n      }\n    },\n  };\n};\n"],"names":["addConfig","ConsoleLogger","Level","INFO","global","process","argv","stopPromise","logger","Logger","key","displayName","info","stop","Promise","resolve","runningProcess","removeAllListeners","gracefulKill","SIGTERMTimeout","then","undefined","start","Error","reject","stdoutOption","prefixStdout","spawn","command","args","logStreamInLogger","stream","loggerLevel","pipe","split","on","line","length","startsWith","endsWith","json","JSON","parse","log","err","stdout","stderr","ERROR","code","signal","warn","autoRestart","debug","message","success","kill"],"mappings":"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"}