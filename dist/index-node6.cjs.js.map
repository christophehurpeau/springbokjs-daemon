{"version":3,"file":"index-node6.cjs.js","sources":["../src/index.js"],"sourcesContent":["import { spawn } from 'child_process';\nimport gracefulKill from 'graceful-kill';\nimport split from 'split';\nimport Logger, { addConfig, levels } from 'nightingale/src';\nimport ConsoleLogger from 'nightingale-console/src';\n\naddConfig({ pattern: /^springbokjs-daemon/, handler: new ConsoleLogger(levels.INFO) });\n\ntype OptionsType = {|\n  key?: ?string,\n  displayName?: ?string,\n  prefixStdout?: ?boolean,\n  command?: string,\n  args?: Array<string | number>,\n  cwd?: string,\n  autoRestart?: boolean,\n  SIGTERMTimeout?: number,\n|};\n\nexport default ({\n  key,\n  displayName,\n  prefixStdout = false,\n  command = global.process.argv[0],\n  args = [],\n  cwd,\n  autoRestart = false,\n  SIGTERMTimeout = 4000,\n}: ?OptionsType = {}) => {\n  let process = null;\n  let stopPromise = null;\n  const logger = new Logger(`springbokjs-daemon${key ? `:${key}` : ''}`, displayName);\n  logger.info('created', { command, args });\n\n  const stop = () => {\n    if (!process) return Promise.resolve(stopPromise);\n\n    const runningProcess = process;\n    process = null;\n\n    runningProcess.removeAllListeners();\n    return (stopPromise = gracefulKill(runningProcess, SIGTERMTimeout).then(() => {\n      stopPromise = null;\n    }));\n  };\n\n  const start = () => {\n    if (process) {\n      throw new Error('Process already started');\n    }\n\n    return new Promise((resolve, reject) => {\n      const stdoutOption = prefixStdout ? 'pipe' : 'inherit';\n      process = spawn(command, args, {\n        cwd,\n        stdio: ['ignore', stdoutOption, stdoutOption, 'ipc'],\n      });\n\n      if (prefixStdout) {\n        const logStreamInLogger = (stream, loggerType) => {\n          stream.pipe(split()).on('data', line => {\n            if (line.length === 0) return;\n            if (line.startsWith('{') && line.endsWith('}')) {\n              try {\n                const json = JSON.parse(line);\n                logger[loggerType]('', json);\n                return;\n              } catch (err) {}\n            }\n\n            logger[loggerType](line);\n          });\n        };\n\n        logStreamInLogger(process.stdout, 'info');\n        logStreamInLogger(process.stderr, 'error');\n      }\n\n      process.on('exit', (code, signal) => {\n        logger.warn('exited', { code, signal });\n        process = null;\n        if (autoRestart) {\n          logger.debug('autorestart');\n          start().then(resolve, reject);\n        } else {\n          reject();\n        }\n      });\n\n      process.on('message', message => {\n        if (message === 'ready') {\n          logger.success('ready');\n          resolve();\n        } else if (message === 'restart') {\n          logger.info('restarting...');\n          stop().then(() => start());\n        } else {\n          logger.info('message', { message });\n        }\n      });\n    });\n  };\n\n  return {\n    hasExited() {\n      return process === null;\n    },\n\n    start() {\n      logger.info('starting...');\n      return start();\n    },\n\n    stop() {\n      if (!process) logger.info('stopping...');\n      return stop();\n    },\n\n    restart() {\n      logger.info('restarting...');\n      return stop().then(() => start());\n    },\n\n    sendSIGUSR2() {\n      process.kill('SIGUSR2');\n    },\n  };\n};\n"],"names":["addConfig","pattern","handler","ConsoleLogger","levels","INFO","global","process","argv","stopPromise","logger","Logger","key","displayName","info","command","args","stop","Promise","resolve","runningProcess","removeAllListeners","gracefulKill","SIGTERMTimeout","then","start","Error","reject","stdoutOption","prefixStdout","spawn","logStreamInLogger","stream","loggerType","pipe","split","on","line","length","startsWith","endsWith","json","JSON","parse","err","stdout","stderr","code","signal","warn","autoRestart","debug","message","success","kill"],"mappings":";;;;;;;;;;;AAMAA,iBAAU,EAAEC,SAAS,qBAAX,EAAkCC,SAAS,IAAIC,aAAJ,CAAkBC,cAAOC,IAAzB,CAA3C,EAAV;;AAaA,aAAe,CAAC;KAAA;aAAA;iBAGC,KAHD;YAIJC,OAAOC,OAAP,CAAeC,IAAf,CAAoB,CAApB,CAJI;WAAA;KAAA;gBAOA,KAPA;mBAQG;MARJ,KASU;MACnBD,UAAU,IAAd;MACIE,cAAc,IAAlB;QACMC,SAAS,IAAIC,eAAJ,CAAY,qBAAoBC,MAAO,IAAGA,GAAI,EAAd,GAAkB,EAAG,EAArD,EAAwDC,WAAxD,CAAf;SACOC,IAAP,CAAY,SAAZ,EAAuB,EAAEC,OAAF,EAAWC,IAAX,EAAvB;;QAEMC,OAAO,MAAM;QACb,CAACV,OAAL,EAAc,OAAOW,QAAQC,OAAR,CAAgBV,WAAhB,CAAP;;UAERW,iBAAiBb,OAAvB;cACU,IAAV;;mBAEec,kBAAf;WACQZ,cAAca,aAAaF,cAAb,EAA6BG,cAA7B,EAA6CC,IAA7C,CAAkD,MAAM;oBAC9D,IAAd;KADoB,CAAtB;GAPF;;QAYMC,QAAQ,MAAM;QACdlB,OAAJ,EAAa;YACL,IAAImB,KAAJ,CAAU,yBAAV,CAAN;;;WAGK,IAAIR,OAAJ,CAAY,CAACC,OAAD,EAAUQ,MAAV,KAAqB;YAChCC,eAAeC,eAAe,MAAf,GAAwB,SAA7C;gBACUC,oBAAMf,OAAN,EAAeC,IAAf,EAAqB;WAAA;eAEtB,CAAC,QAAD,EAAWY,YAAX,EAAyBA,YAAzB,EAAuC,KAAvC;OAFC,CAAV;;UAKIC,YAAJ,EAAkB;cACVE,oBAAoB,CAACC,MAAD,EAASC,UAAT,KAAwB;iBACzCC,IAAP,CAAYC,OAAZ,EAAqBC,EAArB,CAAwB,MAAxB,EAAgCC,QAAQ;gBAClCA,KAAKC,MAAL,KAAgB,CAApB,EAAuB;gBACnBD,KAAKE,UAAL,CAAgB,GAAhB,KAAwBF,KAAKG,QAAL,CAAc,GAAd,CAA5B,EAAgD;kBAC1C;sBACIC,OAAOC,KAAKC,KAAL,CAAWN,IAAX,CAAb;uBACOJ,UAAP,EAAmB,EAAnB,EAAuBQ,IAAvB;;eAFF,CAIE,OAAOG,GAAP,EAAY;;;mBAGTX,UAAP,EAAmBI,IAAnB;WAVF;SADF;;0BAekB9B,QAAQsC,MAA1B,EAAkC,MAAlC;0BACkBtC,QAAQuC,MAA1B,EAAkC,OAAlC;;;cAGMV,EAAR,CAAW,MAAX,EAAmB,CAACW,IAAD,EAAOC,MAAP,KAAkB;eAC5BC,IAAP,CAAY,QAAZ,EAAsB,EAAEF,IAAF,EAAQC,MAAR,EAAtB;kBACU,IAAV;YACIE,WAAJ,EAAiB;iBACRC,KAAP,CAAa,aAAb;kBACQ3B,IAAR,CAAaL,OAAb,EAAsBQ,MAAtB;SAFF,MAGO;;;OANT;;cAWQS,EAAR,CAAW,SAAX,EAAsBgB,WAAW;YAC3BA,YAAY,OAAhB,EAAyB;iBAChBC,OAAP,CAAe,OAAf;;SADF,MAGO,IAAID,YAAY,SAAhB,EAA2B;iBACzBtC,IAAP,CAAY,eAAZ;iBACOU,IAAP,CAAY,MAAMC,OAAlB;SAFK,MAGA;iBACEX,IAAP,CAAY,SAAZ,EAAuB,EAAEsC,OAAF,EAAvB;;OARJ;KAtCK,CAAP;GALF;;SAyDO;gBACO;aACH7C,YAAY,IAAnB;KAFG;;YAKG;aACCO,IAAP,CAAY,aAAZ;aACOW,OAAP;KAPG;;WAUE;UACD,CAAClB,OAAL,EAAcG,OAAOI,IAAP,CAAY,aAAZ;aACPG,MAAP;KAZG;;cAeK;aACDH,IAAP,CAAY,eAAZ;aACOG,OAAOO,IAAP,CAAY,MAAMC,OAAlB,CAAP;KAjBG;;kBAoBS;cACJ6B,IAAR,CAAa,SAAb;;GArBJ;CApFF;;;;"}