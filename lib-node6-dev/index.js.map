{"version":3,"sources":["../src/index.js"],"names":["pattern","handler","INFO","OptionsType","key","displayName","command","args","autoRestart","SIGTERMTimeout","global","process","argv","stopPromise","logger","info","start","Error","Promise","resolve","reject","stdio","on","code","signal","warn","debug","then","message","success","restart","stop","runningProcess","killTimeout","setTimeout","kill","removeAllListeners","once","clearTimeout","sendSIGUSR2"],"mappings":"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","file":"index.js","sourcesContent":["import { spawn } from 'child_process';\nimport Logger, { addConfig, levels } from 'nightingale/src';\nimport ConsoleLogger from 'nightingale-console/src';\n\naddConfig({ pattern: /^springbokjs-daemon/, handler: new ConsoleLogger(levels.INFO) });\n\ntype OptionsType = {|\n  key: ?string,\n  displayName: ?string,\n  command: ?string,\n  args: ?Array<string | number>,\n  autoRestart: ?boolean,\n  SIGTERMTimeout: ?number,\n|};\n\nexport default ({\n  key,\n  displayName,\n  command = global.process.argv[0],\n  args = [],\n  autoRestart = false,\n  SIGTERMTimeout = 4000,\n}: OptionsType = {}) => {\n  let process = null;\n  let stopPromise = null;\n  const logger = new Logger(`springbokjs-daemon${key ? `:${key}` : ''}`, displayName);\n  logger.info('created', { command, args });\n\n  return {\n    start() {\n      if (process) {\n        throw new Error('Process already started');\n      }\n\n      logger.info('starting...');\n      return new Promise((resolve, reject) => {\n        process = spawn(command, args, {\n          stdio: ['pipe', 'pipe', 'pipe', 'ipc'],\n        });\n\n        process.on('exit', (code, signal) => {\n          logger.warn('exited', { code, signal });\n          process = null;\n          if (autoRestart) {\n            logger.debug('autorestart');\n            this.start().then(resolve, reject);\n          } else {\n            reject();\n          }\n        });\n\n        process.on('message', (message) => {\n          if (message === 'ready') {\n            logger.success('ready');\n            resolve();\n          } else if (message === 'restart') {\n            this.restart();\n          } else {\n            logger.info('message', { message });\n          }\n        });\n      });\n    },\n\n    stop() {\n      if (!process) return Promise.resolve(stopPromise);\n\n      logger.info('stopping...');\n      return stopPromise = new Promise(resolve => {\n        const runningProcess = process;\n        process = null;\n\n        const killTimeout = setTimeout(() => {\n          logger.warn('timeout: sending SIGKILL...');\n          runningProcess.kill('SIGKILL');\n        }, SIGTERMTimeout);\n\n        runningProcess.removeAllListeners();\n        runningProcess.once('exit', (code, signal) => {\n          logger.info('stopped', { code, signal });\n          if (killTimeout) clearTimeout(killTimeout);\n          stopPromise = null;\n          resolve();\n        });\n        runningProcess.kill();\n      });\n    },\n\n    restart() {\n      logger.info('restarting...');\n      return this.stop().then(() => this.start());\n    },\n\n    sendSIGUSR2() {\n      process.kill('SIGUSR2');\n    },\n  };\n};\n"]}