{"version":3,"sources":["../src/index.js"],"names":["createDaemon","key","handler","INFO","SpringbokDaemon","command","args","autorestart","process","stopPromise","logger","info","join","Error","env","stdout","addListener","data","write","emit","stderr","code","signal","warn","debug","start","Promise","resolve","killTimeout","setTimeout","kill","removeAllListeners","clearTimeout","stop","then","timeout","restart","node"],"mappings":"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","file":"index.js","sourcesContent":["import { spawn } from 'child_process';\nimport { EventEmitter } from 'events';\nimport Logger, { addConfig, levels } from 'nightingale/src';\nimport ConsoleLogger from 'nightingale-console/src';\n\naddConfig({ key: 'springbokjs-daemon', handler: new ConsoleLogger(levels.INFO) });\n\ntype OptionsType = {|\n  autorestart: ?boolean,\n|};\n\nclass SpringbokDaemon extends EventEmitter {\n  constructor(command, args, { autorestart }: OptionsType = {}) {\n    super();\n    this.command = command;\n    this.args = args;\n    this.process = null;\n    this.stopPromise = null;\n    this.logger = new Logger('springbokjs-daemon');\n    this.logger.info(command + (args && (` ${args.join(' ')}`)));\n    this.autorestart = autorestart || false;\n  }\n\n  start() {\n    if (this.process) {\n      throw new Error('Process already started');\n    }\n\n    this.logger.info('Starting...');\n\n    this.process = spawn(this.command, this.args, { env: process.env });\n    this.process.stdout.addListener('data', (data) => {\n      process.stdout.write(data);\n      this.emit('stdout', data);\n    });\n    this.process.stderr.addListener('data', (data) => {\n      process.stderr.write(data);\n      this.emit('stderr', data);\n    });\n\n    this.process.addListener('exit', (code, signal) => {\n      this.logger.warn('Exited', { code, signal });\n      this.process = null;\n      if (this.autorestart) {\n        this.logger.debug('Autorestart');\n        this.start();\n      }\n    });\n  }\n\n  stop() {\n    if (!this.process) return Promise.resolve(this.stopPromise);\n\n    this.logger.info('Stopping...');\n    return this.stopPromise = new Promise(resolve => {\n      const process = this.process;\n      this.process = null;\n\n      const killTimeout = setTimeout(() => {\n        this.logger.warn('Timeout: sending SIGKILL...');\n        process.kill('SIGKILL');\n      }, 4000);\n\n      process.removeAllListeners();\n      process.addListener('exit', (code, signal) => {\n        this.logger.info('Stopped', { code, signal });\n        if (killTimeout) clearTimeout(killTimeout);\n        this.stopPromise = null;\n        resolve();\n      });\n      process.kill();\n    });\n  }\n\n  restart() {\n    this.logger.info('Restarting...');\n    return this.stop().then(() => this.start());\n  }\n\n  restartTimeout(timeout: number) {\n    return setTimeout(() => this.restart(), timeout);\n  }\n}\n\nexport default function createDaemon(command, args) {\n  return new SpringbokDaemon(command, args);\n}\n\nexport const node = args => createDaemon('node', args);\ncreateDaemon.node = node;\n"]}