{"version":3,"sources":["../src/index.js"],"names":["pattern","handler","INFO","key","displayName","prefixStdout","command","global","process","argv","args","cwd","autoRestart","SIGTERMTimeout","stopPromise","logger","info","stop","Promise","resolve","runningProcess","removeAllListeners","then","start","Error","reject","stdoutOption","stdio","logStreamInLogger","stream","loggerType","pipe","on","line","length","startsWith","endsWith","json","JSON","parse","err","stdout","stderr","code","signal","warn","debug","message","success","restart","sendSIGUSR2","kill"],"mappings":"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","file":"index.js","sourcesContent":["import { spawn } from 'child_process';\nimport gracefulKill from 'graceful-kill';\nimport split from 'split';\nimport Logger, { addConfig, levels } from 'nightingale/src';\nimport ConsoleLogger from 'nightingale-console/src';\n\naddConfig({ pattern: /^springbokjs-daemon/, handler: new ConsoleLogger(levels.INFO) });\n\ntype OptionsType = {|\n  key?: ?string,\n  displayName?: ?string,\n  prefixStdout?: ?boolean,\n  command?: string,\n  args?: Array<string | number>,\n  cwd?: string,\n  autoRestart?: boolean,\n  SIGTERMTimeout?: number,\n|};\n\nexport default (\n  {\n    key,\n    displayName,\n    prefixStdout = false,\n    command = global.process.argv[0],\n    args = [],\n    cwd,\n    autoRestart = false,\n    SIGTERMTimeout = 4000,\n  }: ?OptionsType = {},\n) => {\n  let process = null;\n  let stopPromise = null;\n  const logger = new Logger(`springbokjs-daemon${key ? `:${key}` : ''}`, displayName);\n  logger.info('created', { command, args });\n\n  const stop = () => {\n    if (!process) return Promise.resolve(stopPromise);\n\n    const runningProcess = process;\n    process = null;\n\n    runningProcess.removeAllListeners();\n    return (stopPromise = gracefulKill(runningProcess, SIGTERMTimeout).then(() => {\n      stopPromise = null;\n    }));\n  };\n\n  const start = () => {\n    if (process) {\n      throw new Error('Process already started');\n    }\n\n    return new Promise((resolve, reject) => {\n      const stdoutOption = prefixStdout ? 'pipe' : 'inherit';\n      process = spawn(command, args, {\n        cwd,\n        stdio: ['ignore', stdoutOption, stdoutOption, 'ipc'],\n      });\n\n      if (prefixStdout) {\n        const logStreamInLogger = (stream, loggerType) => {\n          stream.pipe(split()).on('data', line => {\n            if (line.length === 0) return;\n            if (line.startsWith('{') && line.endsWith('}')) {\n              try {\n                const json = JSON.parse(line);\n                logger[loggerType]('', json);\n                return;\n              } catch (err) {}\n            }\n\n            logger[loggerType](line);\n          });\n        };\n\n        logStreamInLogger(process.stdout, 'info');\n        logStreamInLogger(process.stderr, 'error');\n      }\n\n      process.on('exit', (code, signal) => {\n        logger.warn('exited', { code, signal });\n        process = null;\n        if (autoRestart) {\n          logger.debug('autorestart');\n          start().then(resolve, reject);\n        } else {\n          reject();\n        }\n      });\n\n      process.on('message', message => {\n        if (message === 'ready') {\n          logger.success('ready');\n          resolve();\n        } else if (message === 'restart') {\n          logger.info('restarting...');\n          stop().then(() => start());\n        } else {\n          logger.info('message', { message });\n        }\n      });\n    });\n  };\n\n  return {\n    start() {\n      logger.info('starting...');\n      return start();\n    },\n\n    stop() {\n      if (!process) logger.info('stopping...');\n      return stop();\n    },\n\n    restart() {\n      logger.info('restarting...');\n      return stop().then(() => start());\n    },\n\n    sendSIGUSR2() {\n      process.kill('SIGUSR2');\n    },\n  };\n};\n"]}