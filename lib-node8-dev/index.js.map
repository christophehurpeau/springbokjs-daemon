{"version":3,"sources":["../src/index.js"],"names":["pattern","handler","INFO","key","displayName","command","global","process","argv","args","cwd","autoRestart","SIGTERMTimeout","stopPromise","logger","info","stop","Promise","resolve","runningProcess","removeAllListeners","then","start","Error","reject","stdio","on","code","signal","warn","debug","message","success","restart","sendSIGUSR2","kill"],"mappings":"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","file":"index.js","sourcesContent":["import { spawn } from 'child_process';\nimport gracefulKill from 'graceful-kill';\nimport Logger, { addConfig, levels } from 'nightingale/src';\nimport ConsoleLogger from 'nightingale-console/src';\n\naddConfig({ pattern: /^springbokjs-daemon/, handler: new ConsoleLogger(levels.INFO) });\n\ntype OptionsType = {|\n  key?: ?string,\n  displayName?: ?string,\n  command?: string,\n  args?: Array<string | number>,\n  cwd?: string,\n  autoRestart?: boolean,\n  SIGTERMTimeout?: number,\n|};\n\nexport default (\n  {\n    key,\n    displayName,\n    command = global.process.argv[0],\n    args = [],\n    cwd,\n    autoRestart = false,\n    SIGTERMTimeout = 4000,\n  }: ?OptionsType = {},\n) => {\n  let process = null;\n  let stopPromise = null;\n  const logger = new Logger(`springbokjs-daemon${key ? `:${key}` : ''}`, displayName);\n  logger.info('created', { command, args });\n\n  const stop = () => {\n    if (!process) return Promise.resolve(stopPromise);\n\n    const runningProcess = process;\n    process = null;\n\n    runningProcess.removeAllListeners();\n    return (stopPromise = gracefulKill(runningProcess, SIGTERMTimeout).then(() => {\n      stopPromise = null;\n    }));\n  };\n\n  const start = () => {\n    if (process) {\n      throw new Error('Process already started');\n    }\n\n    return new Promise((resolve, reject) => {\n      process = spawn(command, args, {\n        cwd,\n        stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n      });\n\n      process.on('exit', (code, signal) => {\n        logger.warn('exited', { code, signal });\n        process = null;\n        if (autoRestart) {\n          logger.debug('autorestart');\n          start().then(resolve, reject);\n        } else {\n          reject();\n        }\n      });\n\n      process.on('message', message => {\n        if (message === 'ready') {\n          logger.success('ready');\n          resolve();\n        } else if (message === 'restart') {\n          logger.info('restarting...');\n          stop().then(() => start());\n        } else {\n          logger.info('message', { message });\n        }\n      });\n    });\n  };\n\n  return {\n    start() {\n      logger.info('starting...');\n      return start();\n    },\n\n    stop() {\n      if (!process) logger.info('stopping...');\n      return stop();\n    },\n\n    restart() {\n      logger.info('restarting...');\n      return stop().then(() => start());\n    },\n\n    sendSIGUSR2() {\n      process.kill('SIGUSR2');\n    },\n  };\n};\n"]}